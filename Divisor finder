import math

def primes(n):
    """ Returns  a list of primes < n """
    sieve = [True] * (n//2)
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]


def trinum (n):
  """ Assumes n is int and n >= 0
      Returns triangle value of n """
  return int((n*(n+1))/2)
      
      
def prime (n):
  """ Apply prime factorization on n
      based on prime numbers from 2 to square root of n
      after implementation if quotient is not on primes list 
      quotient is also a prime """ 
  sqr = n
  count = 0
  tot = 1
  for i in primes(int(math.sqrt(sqr))):
    while n%i == 0 and n/i > 1:
      n = n/i
      count += 1
    if n/i == 1:  
      count += 1
      tot *= count + 1
      break    
    tot *= count + 1
    count = 0
  if n not in primes(int(math.sqrt(sqr))):
    count = 1
    tot *= count + 1
  return tot
